# -*- coding: utf-8 -*-
"""CarDekhoPrediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pEFndxNklp0ytxrqEy8WMfNqE-wdU0pr
"""

import pandas as pd
df=pd.read_csv('car data.csv')
df.head()

df.drop(['Car_Name'],axis=1,inplace=True)

df.head()

df.columns

final_df=df[['Year', 'Selling_Price', 'Present_Price', 'Kms_Driven', 'Fuel_Type',
       'Seller_Type', 'Transmission', 'Owner']]

final_df.head()

final_df['current_year']=2020
final_df.head()

final_df['Number of years']=final_df['current_year']-final_df['Year']
final_df.drop(['Year','current_year'],axis=1,inplace=True)
final_df.head()

print(final_df['Fuel_Type'].unique())
print(final_df['Seller_Type'].unique())
print(final_df['Owner'].unique())
print(final_df['Transmission'].unique())

final_df.isnull().sum()

final_df.describe()

final_df=pd.get_dummies(final_df,drop_first=True)
final_df.head()

X=final_df.iloc[:,1:]
y=final_df.iloc[:,0]
y.head()

X.head()

final_df.corr()

import seaborn as sns
sns.pairplot(final_df)

from sklearn.model_selection import train_test_split
train_x,test_x,train_y,test_y=train_test_split(X,y,test_size=0.2,random_state=0)

train_x.head()

from sklearn.model_selection import RandomizedSearchCV
import numpy as np
n_estimators=[int(x) for x in np.linspace(start=100,stop=1000,num=10)]
min_samples_split=[2,4,5,7,10]
min_samples_leaf=[1,2,3,5,10]
criterion=['mse','mae']
max_depth=[1,2,5,7,10]
max_features = ['auto', 'sqrt']

rf_param={'n_estimators':n_estimators,'min_samples_split':min_samples_split,'min_samples_leaf':min_samples_leaf
          ,'criterion':criterion,'max_depth':max_depth,'max_features':max_features }

from sklearn.ensemble import RandomForestRegressor
rf=RandomForestRegressor()

#RandomForestRegressor(n_estimators=100, criterion='mse', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='auto', max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, bootstrap=True, oob_score=False, n_jobs=None, random_state=None, verbose=0, warm_start=False, ccp_alpha=0.0, max_samples=None)

random_cv=RandomizedSearchCV(estimator=rf,param_distributions=rf_param,random_state=0)
random_cv.fit(train_x,train_y)

random_cv.best_estimator_

print(random_cv.best_params_)
print(random_cv.best_score_)

predictions=random_cv.predict(test_x)

import matplotlib.pyplot as plt
plt.plot(test_y,predictions,marker='o')
plt.show()

from sklearn import metrics
print('MSE:', metrics.mean_squared_error(test_y, predictions))

import pickle
pickle.dump(random_cv,open('CarDekhoPrediction.pkl','wb'))